<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chun.springpt.dao.DietDao">
    <select id="Dailyinfo" resultType="dvo">
        SELECT TRUNC(u.uploaddate) as uploadDate, SUM(foodcal * (u.mass / f.foodweight)) as dailyTotal
        FROM upphoto u
        INNER JOIN food f ON u.foodnum = f.foodnum
        inner join normal_mem n on u.nnum =n.nnum
        WHERE n.normal_id = #{userName}
        AND TRUNC(u.uploaddate) BETWEEN TO_DATE(#{startPeriod}, 'YYYY-MM-DD') AND TO_DATE(#{endPeriod}, 'YYYY-MM-DD')
        GROUP BY TRUNC(u.uploaddate)
        ORDER BY TRUNC(u.uploaddate)
    </select>
    <!--유저 권장 칼로리를 구하기 위한 SQL (프로시저 이용)-->
    <select id="getRecommandCal" statementType="CALLABLE" resultType="HashMap">
        {call get_recommand_cal(#{userName, jdbcType=VARCHAR, mode=IN}, #{result, jdbcType=NUMERIC, mode=OUT})}
    </select>
    <!-- 유저 전일 대비 비교표를 위한 SQL-->
    <select id= "get_differ_lastday" resultType="dvo">
    SELECT
            u.category,
            SUM(CASE WHEN TRUNC(u.uploaddate) = TRUNC(SYSDATE) THEN f.foodcal * (u.mass / f.foodweight) ELSE 0 END) AS total_calories_today,
            LISTAGG(CASE WHEN TRUNC(u.uploaddate) = TRUNC(SYSDATE) THEN f.foodname ELSE NULL END, ', ') WITHIN GROUP (ORDER BY f.foodname) AS food_names,
            (
                SELECT SUM(f2.foodcal * (u2.mass / f2.foodweight))
                FROM upphoto u2
                INNER JOIN food f2 ON u2.foodnum = f2.foodnum
                INNER JOIN normal_mem n2 ON u2.nnum = n2.nnum
                WHERE TRUNC(u2.uploaddate) = TRUNC(SYSDATE - 1) AND n2.normal_id = #{userName} AND u2.category = u.category
            ) AS total_calories_yesterday,
            (
                SUM(CASE WHEN TRUNC(u.uploaddate) = TRUNC(SYSDATE) THEN f.foodcal * (u.mass / f.foodweight) ELSE 0 END) -
                (
                    SELECT SUM(f2.foodcal * (u2.mass / f2.foodweight))
                    FROM upphoto u2
                    INNER JOIN food f2 ON u2.foodnum = f2.foodnum
                    INNER JOIN normal_mem n2 ON u2.nnum = n2.nnum
                    WHERE TRUNC(u2.uploaddate) = TRUNC(SYSDATE - 1) AND n2.normal_id = #{userName} AND u2.category = u.category
                )
            ) AS calorie_difference
        FROM upphoto u
        INNER JOIN food f ON u.foodnum = f.foodnum
        INNER JOIN normal_mem n ON u.nnum = n.nnum
        WHERE TRUNC(u.uploaddate) IN (TRUNC(SYSDATE), TRUNC(SYSDATE - 1)) AND n.normal_id = #{userName}
        GROUP BY u.category
        ORDER BY
            CASE
                WHEN u.category = '아침' THEN 1
                WHEN u.category = '점심' THEN 2
                WHEN u.category = '저녁' THEN 3
                WHEN u.category = '간식' THEN 4
                ELSE 5
            END
    </select>
    <select id = "getWeekWeight" resultType = "dvo">
        SELECT TRUNC(ml.dietlogdate) as dietlogdate, ml.dietlogkg
        FROM MEMBERDIETLOG ML
        INNER JOIN NORMAL_MEM N ON N.NNUM = ML.NNUM
        WHERE n.normal_id = #{userName}
        AND TRUNC(ml.dietlogdate)  BETWEEN TO_DATE(#{startPeriod}, 'YYYY-MM-DD') AND TO_DATE(#{endPeriod}, 'YYYY-MM-DD')
        ORDER BY TRUNC(ml.dietlogdate)
    </select>
    <select id = "getTargetWeight" resultType = "dvo">
        select target_weight from normal_mem where normal_id = #{userName}
    </select>
</mapper>