<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chun.springpt.dao.DietDao">
<!-- 일주일 마다 그날그날의 음식 칼로리를 구하는 SQL-->
    <select id="Dailyinfo" resultType="dvo">
        SELECT TRUNC(u.uploaddate) as uploadDate, SUM(foodcal * (u.mass / f.foodweight)) as dailyTotal
        FROM upphoto u
        INNER JOIN food f ON u.foodnum = f.foodnum
        inner join normal_mem n on u.nnum =n.nnum
        WHERE n.normal_id = #{userName}
        AND TRUNC(u.uploaddate) BETWEEN TO_DATE(#{startPeriod}, 'YYYY-MM-DD') AND TO_DATE(#{endPeriod}, 'YYYY-MM-DD')
        GROUP BY TRUNC(u.uploaddate)
        ORDER BY TRUNC(u.uploaddate)
    </select>
    <!--유저 권장 칼로리를 구하기 위한 SQL (프로시저 이용)-->
    <select id="getRecommandCal" statementType="CALLABLE" resultType="HashMap">
        {call get_recommand_cal(#{userName, jdbcType=VARCHAR, mode=IN}, #{result, jdbcType=NUMERIC, mode=OUT})}
    </select>
    <!-- 유저 전일 대비 비교표를 위한 SQL-->
    <select id= "get_differ_lastday" resultType="dvo">
    SELECT
            u.category,
            SUM(CASE WHEN TRUNC(u.uploaddate) = TRUNC(SYSDATE) THEN f.foodcal * (u.mass / f.foodweight) ELSE 0 END) AS total_calories_today,
            LISTAGG(CASE WHEN TRUNC(u.uploaddate) = TRUNC(SYSDATE) THEN f.foodname ELSE NULL END, ', ') WITHIN GROUP (ORDER BY f.foodname) AS food_names,
            (
                SELECT SUM(f2.foodcal * (u2.mass / f2.foodweight))
                FROM upphoto u2
                INNER JOIN food f2 ON u2.foodnum = f2.foodnum
                INNER JOIN normal_mem n2 ON u2.nnum = n2.nnum
                WHERE TRUNC(u2.uploaddate) = TRUNC(SYSDATE - 1) AND n2.normal_id = #{userName} AND u2.category = u.category
            ) AS total_calories_yesterday,
            (
                SUM(CASE WHEN TRUNC(u.uploaddate) = TRUNC(SYSDATE) THEN f.foodcal * (u.mass / f.foodweight) ELSE 0 END) -
                (
                    SELECT SUM(f2.foodcal * (u2.mass / f2.foodweight))
                    FROM upphoto u2
                    INNER JOIN food f2 ON u2.foodnum = f2.foodnum
                    INNER JOIN normal_mem n2 ON u2.nnum = n2.nnum
                    WHERE TRUNC(u2.uploaddate) = TRUNC(SYSDATE - 1) AND n2.normal_id = #{userName} AND u2.category = u.category
                )
            ) AS calorie_difference
        FROM upphoto u
        INNER JOIN food f ON u.foodnum = f.foodnum
        INNER JOIN normal_mem n ON u.nnum = n.nnum
        WHERE TRUNC(u.uploaddate) IN (TRUNC(SYSDATE), TRUNC(SYSDATE - 1)) AND n.normal_id = #{userName}
        GROUP BY u.category
        ORDER BY
            CASE
                WHEN u.category = '아침' THEN 1
                WHEN u.category = '점심' THEN 2
                WHEN u.category = '저녁' THEN 3
                WHEN u.category = '간식' THEN 4
                ELSE 5
            END
    </select>
    <!-- 유저 일주일 단위 체중 변화 기록 구하기-->
    <select id = "getWeekWeight" resultType = "dvo">
        SELECT TRUNC(ml.dietlogdate) as dietlogdate, ml.dietlogkg
        FROM MEMBERDIETLOG ML
        INNER JOIN NORMAL_MEM N ON N.NNUM = ML.NNUM
        WHERE n.normal_id = #{userName}
        AND TRUNC(ml.dietlogdate)  BETWEEN TO_DATE(#{startPeriod}, 'YYYY-MM-DD') AND TO_DATE(#{endPeriod}, 'YYYY-MM-DD')
        ORDER BY TRUNC(ml.dietlogdate)
    </select>

    <!-- 유저 목표 체중 구하기-->
    <select id = "getTargetWeight" resultType = "dvo">
        select target_weight from normal_mem where normal_id = #{userName}
    </select>
    <!-- 유저 일일 토탈 칼로리,탄수화물, 단백질, 지방 구하기-->
    <select id = "getTotaldailyinfo" resultType = "dtvo">
        SELECT  SUM(foodcal * (u.mass / f.foodweight)) as dailyTotalCal,
            sum(food_tan * (u.mass / f.foodweight)) as dailyTotalTan,
            sum(food_dan * (u.mass / f.foodweight)) as dailyTotalDan,
            sum(food_gi * (u.mass / f.foodweight)) as dailyTotalGi
        FROM upphoto u
        INNER JOIN food f ON u.foodnum = f.foodnum
        inner join normal_mem n on u.nnum =n.nnum
        WHERE n.normal_id = #{userName}
        AND TRUNC(u.uploaddate) = TRUNC(SYSDATE)
    </select>
    <!-- 유저 권장 탄단지 구하기, (프로시저 이용)-->
    <select id="getRecommandTandangi" statementType="CALLABLE">
        {call get_recommand_tandangi(
            #{userName, jdbcType=VARCHAR, mode=IN},
            #{p_recommand_cal, jdbcType=NUMERIC, mode=OUT},
            #{p_recommand_tan, jdbcType=NUMERIC, mode=OUT},
            #{p_recommand_dan, jdbcType=NUMERIC, mode=OUT},
            #{p_recommand_gi, jdbcType=NUMERIC, mode=OUT}
        )}
    </select>
    <select id = "getWeekAvgTandangi" resultType = "nvo">
        SELECT AVG(dailyTotal_tan) as weeklyAvg_tan,
        AVG(dailyTotal_dan) as weeklyAvg_dan,
        AVG(dailyTotal_gi) as weeklyAvg_gi
        FROM (
            SELECT TRUNC(u.uploaddate) as uploadDate, 
                SUM(f.food_tan * (u.mass / f.foodweight)) as dailyTotal_tan,
                SUM(f.food_dan * (u.mass / f.foodweight)) as dailyTotal_dan,
                SUM(f.food_gi * (u.mass / f.foodweight)) as dailyTotal_gi
            FROM upphoto u
            INNER JOIN food f ON u.foodnum = f.foodnum
            INNER JOIN normal_mem n ON u.nnum = n.nnum
            WHERE n.normal_id = #{userName}
            AND TRUNC(u.uploaddate) BETWEEN TO_DATE(#{startPeriod}, 'YYYY-MM-DD') 
                                        AND TO_DATE(#{endPeriod}, 'YYYY-MM-DD')
            GROUP BY TRUNC(u.uploaddate)
        ) subquery
    </select>
    <!-- 음식 상위 3순위 까지 구하기 -->
    <select id = "getTanTop3" resultType = "nvo">
    <![CDATA[
        SELECT * FROM (
        SELECT food_tan/foodweight as ratio, foodname,foodimg, foodcal,food_dan,food_gi,foodweight
        FROM food
        ORDER BY ratio DESC
        )
        WHERE ROWNUM <= 3
        ]]>
    </select>
    <select id = "getDanTop3" resultType = "nvo">
    <![CDATA[
        SELECT * FROM (
        SELECT food_dan/foodweight as ratio, foodname,foodimg,foodcal,food_tan,food_gi,foodweight
        FROM food
        ORDER BY ratio DESC
        )
        WHERE ROWNUM <= 3
        ]]>
    </select>
    <select id = "getGiTop3" resultType = "nvo">
    <![CDATA[
        SELECT * FROM (
        SELECT food_gi/foodweight as ratio, foodname,foodimg,foodcal,food_tan,food_dan,foodweight
        FROM food
        ORDER BY ratio DESC
        )
        WHERE ROWNUM <= 3
        ]]>
    </select>
    <select id = "getCalTop3" resultType = "nvo">
    <![CDATA[
        SELECT * FROM (
        SELECT foodcal/foodweight as ratio, foodname,foodimg, food_tan,food_dan,food_gi,foodweight
        FROM food
        ORDER BY ratio DESC
        )
        WHERE ROWNUM <= 3
        ]]>
    </select>
    <!-- 끝 -->


    <!-- 검색 조건 별 매퍼-->
    <!-- 카테고리 별 검색 매퍼-->
    <select id ="searchCategory" resultType = "svo">
    <![CDATA[
        SELECT * FROM (
          SELECT N.NICKNAME,F.FOODIMG, F.FOODNAME, F.FOODCAL, F.FOOD_TAN, F.FOOD_DAN, F.FOOD_GI, U.CATEGORY ,U.UPLOADDATE
          FROM MEMBERS M
          INNER JOIN NORMAL_MEM N ON M.ID = N.NORMAL_ID
          INNER JOIN UPPHOTO U ON N.NNUM = U.NNUM
          INNER JOIN FOOD F ON U.FOODNUM = F.FOODNUM
          WHERE U.category = #{category} 
          AND M.ROLE = 'NORMAL'
          AND N.normal_id != #{userName}
          ORDER BY U.UPLOADDATE DESC
        )
        WHERE ROWNUM <= 25
    ]]>
    </select>
    <!--목적 검색 별 검색 매퍼-->
    <select id ="searchPurpose" resultType = "svo">
    <![CDATA[
        SELECT * FROM (
          SELECT  N.NICKNAME,F.FOODIMG, F.FOODNAME, F.FOODCAL, F.FOOD_TAN, F.FOOD_DAN, F.FOOD_GI, U.CATEGORY ,U.UPLOADDATE
          FROM MEMBERS M
          INNER JOIN NORMAL_MEM N ON M.ID = N.NORMAL_ID
          INNER JOIN UPPHOTO U ON N.NNUM = U.NNUM
          INNER JOIN FOOD F ON U.FOODNUM = F.FOODNUM
          WHERE n.purpose = #{purpose} 
          AND M.ROLE = 'NORMAL'
          AND N.normal_id != #{userName}
          ORDER BY U.UPLOADDATE DESC
        )
        WHERE ROWNUM <= 25
    ]]>
    </select>
    <!-- 나이대 검색 별 검색 매퍼-->
    <select id ="searchAge" resultType = "svo">
    <![CDATA[
        SELECT * FROM (
          SELECT  N.NICKNAME,F.FOODIMG, F.FOODNAME, F.FOODCAL, F.FOOD_TAN, F.FOOD_DAN, F.FOOD_GI, U.CATEGORY ,U.UPLOADDATE
          FROM MEMBERS M
          INNER JOIN NORMAL_MEM N ON M.ID = N.NORMAL_ID
          INNER JOIN UPPHOTO U ON N.NNUM = U.NNUM
          INNER JOIN FOOD F ON U.FOODNUM = F.FOODNUM
          WHERE FLOOR(MONTHS_BETWEEN(SYSDATE, M.BIRTH) / 12) BETWEEN #{age} AND #{agemax}
          AND M.ROLE = 'NORMAL'
          AND N.normal_id != #{userName}
          ORDER BY U.UPLOADDATE DESC
        )
        WHERE ROWNUM <= 25
    ]]>
    </select>

    <!-- 연속 날짜 구하기 -->
    <select id="getConsecutive_Dates" statementType="CALLABLE">
        {call get_Consecutive_Dates(
            #{userName, jdbcType=VARCHAR, mode=IN},
            #{P_COUNT, jdbcType=NUMERIC, mode=OUT}
        )}
    </select>
    

    
</mapper>